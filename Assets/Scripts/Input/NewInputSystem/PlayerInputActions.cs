//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/NewInputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""d461f66a-7efd-48fb-beb7-ecd7258703e2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""22edab2a-7619-44ec-879a-c04e4e2a4359"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7d0f7e77-a55b-4095-beeb-1087d57fdb4f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6716a745-ed9a-450f-8106-c65c5bc90d5f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""150f8785-a141-4798-b83a-8d8c623e7306"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7fb53ef4-9680-4934-a553-336b7151f16a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d6e68de-1c72-414c-b39d-8933f69b1abe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""7263f531-ab1a-4747-ad38-f2b7ecdf3d33"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""a4ae7d61-4a19-4ca5-a27d-004b5ca8e86f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7cf9f328-6c71-45e4-b717-52d1d3283be3"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.01)"",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""11e19665-0238-4a0c-9559-3a728a78c86a"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a810f263-3139-43ea-ac2f-314de0b03b84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractAlternate"",
                    ""type"": ""Button"",
                    ""id"": ""ff5f2bb5-7b66-487f-a497-55391f674c73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50a1d4f1-9225-4a59-86af-604c915e3d1a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e29c5480-01ad-4bcf-afa8-1db63e3975b8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Projection"",
            ""id"": ""b9079e11-a64a-42d0-922a-d0fd00315400"",
            ""actions"": [
                {
                    ""name"": ""NextProjectableObject"",
                    ""type"": ""Button"",
                    ""id"": ""9934c92b-016a-4e12-8577-ccd414ebec7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousProjectableObject"",
                    ""type"": ""Button"",
                    ""id"": ""953b7721-858e-45a8-aaba-cde690cdf4d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_1stProjectableIObject"",
                    ""type"": ""Button"",
                    ""id"": ""1debcc65-1952-435e-88af-8d2d78ae95fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_2ndProjectableObject"",
                    ""type"": ""Button"",
                    ""id"": ""1a049169-f83a-43e5-ae50-ff6707cabfe3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_3rdProjectableObject"",
                    ""type"": ""Button"",
                    ""id"": ""d0088746-bbf8-45f6-b031-b5df1909b021"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""_4thProjectableObject"",
                    ""type"": ""Button"",
                    ""id"": ""abd3dd7a-a156-4b78-9986-ffd711c64b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AllProjectableObjectsDematerialization"",
                    ""type"": ""Button"",
                    ""id"": ""0a02e48d-dc35-4c3a-9bdb-7ff499757873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c694681-bd41-4d3f-84fd-411a1a4dea61"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextProjectableObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab405e1-9a95-4271-b346-b228ac8aa88b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousProjectableObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f93d076d-796d-4982-9a7d-a18d592dd95c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_1stProjectableIObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3e382b2-534b-432c-8282-8b9bc6b79b32"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_2ndProjectableObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bf92ddc-1719-4043-82bd-21392be5a517"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_3rdProjectableObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09a14990-44ce-42db-a6de-9daaad02cb35"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""_4thProjectableObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6562fefd-57b5-4841-afb7-a2bb75b29294"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AllProjectableObjectsDematerialization"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""badac12d-b3f8-4c8d-b173-4f5ccc7ca587"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""798178e4-781d-4050-9741-ae9d8db605cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""ae76292d-1cc5-4113-939e-68ecbac986d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Journal"",
                    ""type"": ""Button"",
                    ""id"": ""942d0243-e1e5-4114-9a74-2ed3fb27cfe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0662a92-6a30-483f-a5ed-4d516a046948"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44254351-e097-44b8-8056-22373fc3b9c6"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af470d8d-9900-4223-bd19-2c40ed5a209a"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Journal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogues"",
            ""id"": ""3bf00af5-2f07-4d21-97cf-660b9b85a585"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""8657fc0e-6cc9-49df-ae31-03ed99a33fe9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3dad10a-3151-4194-9dda-edba69339a76"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82f4a2aa-4e1b-4c5d-8811-2a88bfce405a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Scroll = m_Camera.FindAction("Scroll", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_Interact = m_Interaction.FindAction("Interact", throwIfNotFound: true);
        m_Interaction_InteractAlternate = m_Interaction.FindAction("InteractAlternate", throwIfNotFound: true);
        // Projection
        m_Projection = asset.FindActionMap("Projection", throwIfNotFound: true);
        m_Projection_NextProjectableObject = m_Projection.FindAction("NextProjectableObject", throwIfNotFound: true);
        m_Projection_PreviousProjectableObject = m_Projection.FindAction("PreviousProjectableObject", throwIfNotFound: true);
        m_Projection__1stProjectableIObject = m_Projection.FindAction("_1stProjectableIObject", throwIfNotFound: true);
        m_Projection__2ndProjectableObject = m_Projection.FindAction("_2ndProjectableObject", throwIfNotFound: true);
        m_Projection__3rdProjectableObject = m_Projection.FindAction("_3rdProjectableObject", throwIfNotFound: true);
        m_Projection__4thProjectableObject = m_Projection.FindAction("_4thProjectableObject", throwIfNotFound: true);
        m_Projection_AllProjectableObjectsDematerialization = m_Projection.FindAction("AllProjectableObjectsDematerialization", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_Inventory = m_UI.FindAction("Inventory", throwIfNotFound: true);
        m_UI_Journal = m_UI.FindAction("Journal", throwIfNotFound: true);
        // Dialogues
        m_Dialogues = asset.FindActionMap("Dialogues", throwIfNotFound: true);
        m_Dialogues_Skip = m_Dialogues.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Scroll;
    public struct CameraActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scroll => m_Wrapper.m_Camera_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
    private readonly InputAction m_Interaction_Interact;
    private readonly InputAction m_Interaction_InteractAlternate;
    public struct InteractionActions
    {
        private @PlayerInputActions m_Wrapper;
        public InteractionActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interaction_Interact;
        public InputAction @InteractAlternate => m_Wrapper.m_Interaction_InteractAlternate;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractAlternate.started += instance.OnInteractAlternate;
            @InteractAlternate.performed += instance.OnInteractAlternate;
            @InteractAlternate.canceled += instance.OnInteractAlternate;
        }

        private void UnregisterCallbacks(IInteractionActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractAlternate.started -= instance.OnInteractAlternate;
            @InteractAlternate.performed -= instance.OnInteractAlternate;
            @InteractAlternate.canceled -= instance.OnInteractAlternate;
        }

        public void RemoveCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);

    // Projection
    private readonly InputActionMap m_Projection;
    private List<IProjectionActions> m_ProjectionActionsCallbackInterfaces = new List<IProjectionActions>();
    private readonly InputAction m_Projection_NextProjectableObject;
    private readonly InputAction m_Projection_PreviousProjectableObject;
    private readonly InputAction m_Projection__1stProjectableIObject;
    private readonly InputAction m_Projection__2ndProjectableObject;
    private readonly InputAction m_Projection__3rdProjectableObject;
    private readonly InputAction m_Projection__4thProjectableObject;
    private readonly InputAction m_Projection_AllProjectableObjectsDematerialization;
    public struct ProjectionActions
    {
        private @PlayerInputActions m_Wrapper;
        public ProjectionActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextProjectableObject => m_Wrapper.m_Projection_NextProjectableObject;
        public InputAction @PreviousProjectableObject => m_Wrapper.m_Projection_PreviousProjectableObject;
        public InputAction @_1stProjectableIObject => m_Wrapper.m_Projection__1stProjectableIObject;
        public InputAction @_2ndProjectableObject => m_Wrapper.m_Projection__2ndProjectableObject;
        public InputAction @_3rdProjectableObject => m_Wrapper.m_Projection__3rdProjectableObject;
        public InputAction @_4thProjectableObject => m_Wrapper.m_Projection__4thProjectableObject;
        public InputAction @AllProjectableObjectsDematerialization => m_Wrapper.m_Projection_AllProjectableObjectsDematerialization;
        public InputActionMap Get() { return m_Wrapper.m_Projection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ProjectionActions set) { return set.Get(); }
        public void AddCallbacks(IProjectionActions instance)
        {
            if (instance == null || m_Wrapper.m_ProjectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ProjectionActionsCallbackInterfaces.Add(instance);
            @NextProjectableObject.started += instance.OnNextProjectableObject;
            @NextProjectableObject.performed += instance.OnNextProjectableObject;
            @NextProjectableObject.canceled += instance.OnNextProjectableObject;
            @PreviousProjectableObject.started += instance.OnPreviousProjectableObject;
            @PreviousProjectableObject.performed += instance.OnPreviousProjectableObject;
            @PreviousProjectableObject.canceled += instance.OnPreviousProjectableObject;
            @_1stProjectableIObject.started += instance.On_1stProjectableIObject;
            @_1stProjectableIObject.performed += instance.On_1stProjectableIObject;
            @_1stProjectableIObject.canceled += instance.On_1stProjectableIObject;
            @_2ndProjectableObject.started += instance.On_2ndProjectableObject;
            @_2ndProjectableObject.performed += instance.On_2ndProjectableObject;
            @_2ndProjectableObject.canceled += instance.On_2ndProjectableObject;
            @_3rdProjectableObject.started += instance.On_3rdProjectableObject;
            @_3rdProjectableObject.performed += instance.On_3rdProjectableObject;
            @_3rdProjectableObject.canceled += instance.On_3rdProjectableObject;
            @_4thProjectableObject.started += instance.On_4thProjectableObject;
            @_4thProjectableObject.performed += instance.On_4thProjectableObject;
            @_4thProjectableObject.canceled += instance.On_4thProjectableObject;
            @AllProjectableObjectsDematerialization.started += instance.OnAllProjectableObjectsDematerialization;
            @AllProjectableObjectsDematerialization.performed += instance.OnAllProjectableObjectsDematerialization;
            @AllProjectableObjectsDematerialization.canceled += instance.OnAllProjectableObjectsDematerialization;
        }

        private void UnregisterCallbacks(IProjectionActions instance)
        {
            @NextProjectableObject.started -= instance.OnNextProjectableObject;
            @NextProjectableObject.performed -= instance.OnNextProjectableObject;
            @NextProjectableObject.canceled -= instance.OnNextProjectableObject;
            @PreviousProjectableObject.started -= instance.OnPreviousProjectableObject;
            @PreviousProjectableObject.performed -= instance.OnPreviousProjectableObject;
            @PreviousProjectableObject.canceled -= instance.OnPreviousProjectableObject;
            @_1stProjectableIObject.started -= instance.On_1stProjectableIObject;
            @_1stProjectableIObject.performed -= instance.On_1stProjectableIObject;
            @_1stProjectableIObject.canceled -= instance.On_1stProjectableIObject;
            @_2ndProjectableObject.started -= instance.On_2ndProjectableObject;
            @_2ndProjectableObject.performed -= instance.On_2ndProjectableObject;
            @_2ndProjectableObject.canceled -= instance.On_2ndProjectableObject;
            @_3rdProjectableObject.started -= instance.On_3rdProjectableObject;
            @_3rdProjectableObject.performed -= instance.On_3rdProjectableObject;
            @_3rdProjectableObject.canceled -= instance.On_3rdProjectableObject;
            @_4thProjectableObject.started -= instance.On_4thProjectableObject;
            @_4thProjectableObject.performed -= instance.On_4thProjectableObject;
            @_4thProjectableObject.canceled -= instance.On_4thProjectableObject;
            @AllProjectableObjectsDematerialization.started -= instance.OnAllProjectableObjectsDematerialization;
            @AllProjectableObjectsDematerialization.performed -= instance.OnAllProjectableObjectsDematerialization;
            @AllProjectableObjectsDematerialization.canceled -= instance.OnAllProjectableObjectsDematerialization;
        }

        public void RemoveCallbacks(IProjectionActions instance)
        {
            if (m_Wrapper.m_ProjectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IProjectionActions instance)
        {
            foreach (var item in m_Wrapper.m_ProjectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ProjectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ProjectionActions @Projection => new ProjectionActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_Inventory;
    private readonly InputAction m_UI_Journal;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputAction @Inventory => m_Wrapper.m_UI_Inventory;
        public InputAction @Journal => m_Wrapper.m_UI_Journal;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Journal.started += instance.OnJournal;
            @Journal.performed += instance.OnJournal;
            @Journal.canceled += instance.OnJournal;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Journal.started -= instance.OnJournal;
            @Journal.performed -= instance.OnJournal;
            @Journal.canceled -= instance.OnJournal;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Dialogues
    private readonly InputActionMap m_Dialogues;
    private List<IDialoguesActions> m_DialoguesActionsCallbackInterfaces = new List<IDialoguesActions>();
    private readonly InputAction m_Dialogues_Skip;
    public struct DialoguesActions
    {
        private @PlayerInputActions m_Wrapper;
        public DialoguesActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skip => m_Wrapper.m_Dialogues_Skip;
        public InputActionMap Get() { return m_Wrapper.m_Dialogues; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialoguesActions set) { return set.Get(); }
        public void AddCallbacks(IDialoguesActions instance)
        {
            if (instance == null || m_Wrapper.m_DialoguesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialoguesActionsCallbackInterfaces.Add(instance);
            @Skip.started += instance.OnSkip;
            @Skip.performed += instance.OnSkip;
            @Skip.canceled += instance.OnSkip;
        }

        private void UnregisterCallbacks(IDialoguesActions instance)
        {
            @Skip.started -= instance.OnSkip;
            @Skip.performed -= instance.OnSkip;
            @Skip.canceled -= instance.OnSkip;
        }

        public void RemoveCallbacks(IDialoguesActions instance)
        {
            if (m_Wrapper.m_DialoguesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialoguesActions instance)
        {
            foreach (var item in m_Wrapper.m_DialoguesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialoguesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialoguesActions @Dialogues => new DialoguesActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnScroll(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnInteractAlternate(InputAction.CallbackContext context);
    }
    public interface IProjectionActions
    {
        void OnNextProjectableObject(InputAction.CallbackContext context);
        void OnPreviousProjectableObject(InputAction.CallbackContext context);
        void On_1stProjectableIObject(InputAction.CallbackContext context);
        void On_2ndProjectableObject(InputAction.CallbackContext context);
        void On_3rdProjectableObject(InputAction.CallbackContext context);
        void On_4thProjectableObject(InputAction.CallbackContext context);
        void OnAllProjectableObjectsDematerialization(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnJournal(InputAction.CallbackContext context);
    }
    public interface IDialoguesActions
    {
        void OnSkip(InputAction.CallbackContext context);
    }
}
